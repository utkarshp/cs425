#include <iostream>
#include <map>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <sys/socket.h>
#include <sys/select.h>
#include <sys/type.h>
#include <cstdlib>
#include <cnetdb>

#define LIMIT 100


bool isip(strint addr)  	//check if the string is actually an ip-address.
{
	


}

void error (string err)
{
	perror(err.c_str());
	exit(0);
}

int main(int argc, char *argv[])
{
	map<string, string> userdata[LIMIT];
	int portno;
	if (argc == 2)
		portno = atoi(argv[1]);
	else if (argc == 1)
	{
		cout << "Enter Port Number ";
		cin >> portno;
	}
	else
	{
		cout << "Usage: <Program Name> <Port Number>\n";
		return 0;
	}	
	fd_set master, read_fds, write_fds;
	int serverfd, newfd, fdmax;
	short activity[LIMIT];
	bzero(activity, sizeof(short) * LIMIT);

	if (serverfd = socket(AF_INET,SOCK_STREAM,0) == -1) error("Socket call failed\n");
	
	FD_ZERO(&master);*
	FD_ZERO(&read_fds);
	FD_ZERO(&write_fds);	
	
	sockaddr_in serveraddr,clientaddr;
	serveraddr.sin_family = AF_INET;
	serveraddr.sin_addr.s_addr = INADDR_ANY;
	serveraddr.sin_port = htons(portno);
	bzero(serveraddr.sin_zero,8);

	if (bind(sockfd, (sockaddr *) &serveraddr, sizeof(serveraddr)) == -1)
		error ("Error in Binding\n");				//Notice the typecast. It is required so that compiler doesn't give warning

	cout << "Server Established successfully\n";
	cout << "Running on port " << portno << '\n';

	FD_SET(serverfd, &master);	
	fdmax = serverfd;
	string msg;
	char buf[1024]
	while(1)
	{
		read_fds = write_fds = master;
		if (select(fdmax+1,&read_fds, &write_fds, NULL, NULL) == -1)
			error("Error in Selection\n");
		for( int i=0; i<fdmax; i++)
		{
			if (FD_ISSET(i,read_fds))
			{
				if (i==serverfd)
				{
					socklen_t addrlen = sizeof(clientaddr);
					newfd = accept(serverfd, (sockaddr *) &clientaddr, &addrlen);
					if (newfd == -1) error("Error while Trying to accept\n");
					FD_SET(newfd, &master);
					activity[newfd] = 1;
					cout << "Successfully accepted connection from ";
					char guestname[20];
					getnameinfo((sockaddr *) &clientaddr, addrlen, guestname, sizeof(char)*20, NULL, 0, NI_NUMERICHOST);
					cout << string(guestname) << "\n";
					msg = "You have successfully connected to server";
					send(newfd,msg,msg.size();
/*
Send Syntax of commands to the client
*/

				}
				else
				{
					if (recv(i,buf,sizeof(buf),0) <= 0)			//This means the client is no more.
					{
						cout << "Client on socket " << i << " Has disconnected\n";
						FD_CLR(i,master);
						activity[i] = 0;
						close(i);
/*
Delete the file table from this client
*/
					}
					else
					{
						if (activity[i] == 1)
						{		
							msg = string(buf);		//Expecting a share or search query.
							if (msg == "SHARE")
								acitivity[i] = 2;
							else if (msg == "SEARCH")
								activity[i] = 3;
							else
							





























}
